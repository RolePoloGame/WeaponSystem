//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/SimpleWeaponSystem/Content/Input/WeaponSystem.BasicControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace WeaponSystem.Input
{
    public partial class @BasicControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @BasicControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""WeaponSystem.BasicControls"",
    ""maps"": [
        {
            ""name"": ""Default"",
            ""id"": ""4e479e1b-fbf2-494b-99cf-17b9884ec5e3"",
            ""actions"": [
                {
                    ""name"": ""PrimaryAction"",
                    ""type"": ""Button"",
                    ""id"": ""dd4dfa0d-96c4-4ba9-9d88-e2ccf93f0304"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryAction"",
                    ""type"": ""Button"",
                    ""id"": ""23796c47-8c25-4dd2-bf64-f2f046655a4b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ReloadAction"",
                    ""type"": ""Button"",
                    ""id"": ""19403fcc-360f-4904-9358-7536e0fb61ed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseAction"",
                    ""type"": ""Button"",
                    ""id"": ""e543ace0-2a71-414e-aa7b-8ee460a537ba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c9291a1b-5fc6-4632-84fb-2f996cc006ad"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2555c41f-97c6-43da-927b-803f7fe2dfcf"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d870af50-5827-4ffa-8cd6-6d73202e7432"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ReloadAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7166d5d4-f386-4072-84be-f54945d2e3e4"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Default
            m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
            m_Default_PrimaryAction = m_Default.FindAction("PrimaryAction", throwIfNotFound: true);
            m_Default_SecondaryAction = m_Default.FindAction("SecondaryAction", throwIfNotFound: true);
            m_Default_ReloadAction = m_Default.FindAction("ReloadAction", throwIfNotFound: true);
            m_Default_UseAction = m_Default.FindAction("UseAction", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Default
        private readonly InputActionMap m_Default;
        private IDefaultActions m_DefaultActionsCallbackInterface;
        private readonly InputAction m_Default_PrimaryAction;
        private readonly InputAction m_Default_SecondaryAction;
        private readonly InputAction m_Default_ReloadAction;
        private readonly InputAction m_Default_UseAction;
        public struct DefaultActions
        {
            private @BasicControls m_Wrapper;
            public DefaultActions(@BasicControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @PrimaryAction => m_Wrapper.m_Default_PrimaryAction;
            public InputAction @SecondaryAction => m_Wrapper.m_Default_SecondaryAction;
            public InputAction @ReloadAction => m_Wrapper.m_Default_ReloadAction;
            public InputAction @UseAction => m_Wrapper.m_Default_UseAction;
            public InputActionMap Get() { return m_Wrapper.m_Default; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
            public void SetCallbacks(IDefaultActions instance)
            {
                if (m_Wrapper.m_DefaultActionsCallbackInterface != null)
                {
                    @PrimaryAction.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnPrimaryAction;
                    @PrimaryAction.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnPrimaryAction;
                    @PrimaryAction.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnPrimaryAction;
                    @SecondaryAction.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnSecondaryAction;
                    @SecondaryAction.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnSecondaryAction;
                    @SecondaryAction.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnSecondaryAction;
                    @ReloadAction.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnReloadAction;
                    @ReloadAction.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnReloadAction;
                    @ReloadAction.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnReloadAction;
                    @UseAction.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnUseAction;
                    @UseAction.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnUseAction;
                    @UseAction.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnUseAction;
                }
                m_Wrapper.m_DefaultActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @PrimaryAction.started += instance.OnPrimaryAction;
                    @PrimaryAction.performed += instance.OnPrimaryAction;
                    @PrimaryAction.canceled += instance.OnPrimaryAction;
                    @SecondaryAction.started += instance.OnSecondaryAction;
                    @SecondaryAction.performed += instance.OnSecondaryAction;
                    @SecondaryAction.canceled += instance.OnSecondaryAction;
                    @ReloadAction.started += instance.OnReloadAction;
                    @ReloadAction.performed += instance.OnReloadAction;
                    @ReloadAction.canceled += instance.OnReloadAction;
                    @UseAction.started += instance.OnUseAction;
                    @UseAction.performed += instance.OnUseAction;
                    @UseAction.canceled += instance.OnUseAction;
                }
            }
        }
        public DefaultActions @Default => new DefaultActions(this);
        public interface IDefaultActions
        {
            void OnPrimaryAction(InputAction.CallbackContext context);
            void OnSecondaryAction(InputAction.CallbackContext context);
            void OnReloadAction(InputAction.CallbackContext context);
            void OnUseAction(InputAction.CallbackContext context);
        }
    }
}
